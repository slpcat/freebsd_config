upstream example_web_pool {
#hash key [consistent];
#ip_hash;
#server address [weight=number max_conns=number max_fails=number fail_timeout=time backup down];
server  10.0.2.66:8060;
#server  10.0.2.63:8060 weight=20 max_fails=3 fail_timeout=2;
keepalive 10;
#注意proxy_pass有3处
}
server {
        listen       80;
        server_name  example.com;
        access_log  /data/log/www.example.com_access.log  main;
        default_type text/html;
        charset utf-8;
        client_max_body_size 100M;
        index  index.html index.htm index.php;

        location /nginx-status {
        stub_status on;
        access_log off;
        #加入访问限制
        allow 106.39.33.34;
        deny all;
        }
	#缓存清理
        include /etc/nginx/conf.d/cache_purge;

	#启用简单waf规则
	include /etc/nginx/conf.d/waf_generic.rules;

	#实现AJAX跨域请求XSS,允许所有来源
        add_header      Access-Control-Allow-Origin *;
	#防止XSS攻击，窃取cookie内容
	add_header	Set-Cookie	HttpOnly;
        #浏览器兼容性模式设置
        add_header      X-UA-Compatible 'IE=Edge,chrome=1';
	#缓存命中状态
	add_header      X-Cache-Status $upstream_cache_status;
        #用来指定浏览器对未指定或错误指定 Content-Type 资源真正类型的猜测行为
        add_header      X-Content-Type-Options  nosniff;
        #启用浏览器XSS保护，并在检查到XSS攻击时，停止渲染页面
        #add_header     X-XSS-Protection '1; mode=block';
        #阻止ClickJacking点击劫持
        add_header      X-Frame-Options "DENY";
        add_header      X-Client-IP $realip_remote_addr;
        add_header      X-Via $server_addr;
	#指定页面可以加载哪些资源，只能从本域名和你显式指定的网址下载脚本,主要目的是减少 XSS 的发生。
        #add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com https://assets.zendesk.com https://connect.facebook.net; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com https://assets.zendesk.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://assets.zendesk.com; font-src 'self' https://themes.googleusercontent.com; frame-src https://assets.zendesk.com https://www.facebook.com https://s-static.ak.facebook.com https://tautt.zendesk.com; object-src 'none'";

	##开启静态文件缓存,明确定义文件格式避免缓存导致异常访问
	##静态代码文件
	location ~* \.(css|js|xml|html|htm)$ {
		#ModSecurity防火墙
        	ModSecurityEnabled on;
        	ModSecurityConfig /etc/nginx/conf.d/modsecurity_generic.sec;
		proxy_pass http://example_web_pool;
		#改写Location和Refresh响应头，屏蔽重定向至后端
        	proxy_redirect default;
                proxy_buffering on;
		#设置默认缓存zone
        	proxy_cache proxy_cache;
        	proxy_cache_min_uses 1;
                #设置缓存key
                proxy_cache_key $host$uri$is_args$args;
                #proxy_cache_key "$host$request_uri $cookie_user";
                #设置状态码为200和304的响应可以进行缓存，并且缓存时间为12小时
                proxy_cache_valid 200 301 302 304 1h;
                proxy_cache_valid 403 404 2h;
		proxy_cache_valid any 1m;
                #proxy_ignore_headers     Set-Cookie;
                #proxy_ignore_headers     X-Accel-Expires Expires Cache-Control;
                #proxy_hide_header        "Expires";
                #add_header               Cache-Control no-cache;
		expires         10m;
}

	#静态资源文件
	location ~* \.(apk|ipa|ico|bmp|gif|jpg|jpeg|png|txt|swf|flv|mp4|rm|rmvb|wav|mp3|ogg|wma|eot|pdf|ttf|otf|woff|woff2|svg|zip|rar|gz|tgz|bz2|tbz|xz|txz|7z)$ {
		#静态资源反盗链
               valid_referers none blocked server_names  *.example.com *.baidu.com;
               if ($invalid_referer) {
               return 403;
               #rewrite ^/ http://www.example.com/403.jpg;
               }
                proxy_pass http://example_web_pool;
	        #改写Location和Refresh响应头，屏蔽重定向至后端
        	proxy_redirect default;
                proxy_buffering on;
		#设置默认缓存zone
        	proxy_cache proxy_cache;
        	proxy_cache_min_uses 1;
                #设置缓存key
                proxy_cache_key $host$uri;
                #proxy_cache_key "$host$request_uri $cookie_user";
                #设置状态码为200和304的响应可以进行缓存，并且缓存时间为12小时
                proxy_cache_valid 200 301 302 304 2d;
                proxy_cache_valid 403 404 12h;
  	            proxy_cache_valid any 1m;
                #proxy_ignore_headers     Set-Cookie;
                #proxy_ignore_headers     X-Accel-Expires Expires Cache-Control;
                #proxy_hide_header        "Expires";
                expires         14d;
}

        location / {
		#ModSecurity防火墙
        	#ModSecurityEnabled on;
        	#ModSecurityConfig /etc/nginx/conf.d/modsecurity_generic.sec;
                proxy_pass http://example_web_pool;
        	#改写Location和Refresh响应头，屏蔽重定向至后端
        	#proxy_redirect default;
                #不在静态定义列表的内容都视为动态内容，不进行缓存
                proxy_buffering off;
                #error_page 404 /var/www/50x/index.html;
                }
	        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
}
