# modsecurity.conf
# -- Rule engine initialization ----------------------------------------------

# Enable ModSecurity, attaching it to every transaction. Use detection
# only to start with, because that minimises the chances of post-installation
# disruption.
#
#SecRuleEngine DetectionOnly
SecRuleEngine On

# -- Request body handling ---------------------------------------------------

# Allow ModSecurity to access request bodies. If you don't, ModSecurity
# won't be able to see any POST parameters, which opens a large security
# hole for attackers to exploit.
#
SecRequestBodyAccess Off


# Enable XML request body parser.
# Initiate XML Processor in case of xml content-type
#
SecRule REQUEST_HEADERS:Content-Type "(?:text|application)/xml" \
     "id:'200000',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"

# Enable JSON request body parser.
# Initiate JSON Processor in case of JSON content-type; change accordingly
# if your application does not use 'application/json'
#
SecRule REQUEST_HEADERS:Content-Type "application/json" \
     "id:'200001',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON"

# Maximum request body size we will accept for buffering. If you support
# file uploads then the value given on the first line has to be as large
# as the largest file you are willing to accept. The second value refers
# to the size of data, with files excluded. You want to keep that value as
# low as practical.
#
SecRequestBodyLimit 131072000
SecRequestBodyNoFilesLimit 131072

# Store up to 128 KB of request body data in memory. When the multipart
# parser reachers this limit, it will start using your hard disk for
# storage. That is slow, but unavoidable.
#
SecRequestBodyInMemoryLimit 131072

# What do do if the request body size is above our configured limit.
# Keep in mind that this setting will automatically be set to ProcessPartial
# when SecRuleEngine is set to DetectionOnly mode in order to minimize
# disruptions when initially deploying ModSecurity.
#
SecRequestBodyLimitAction Reject

# Verify that we've correctly processed the request body.
# As a rule of thumb, when failing to process a request body
# you should reject the request (when deployed in blocking mode)
# or log a high-severity alert (when deployed in detection-only mode).
#
SecRule REQBODY_ERROR "!@eq 0" \
"id:'200002', phase:2,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:'%{reqbody_error_msg}',severity:2"

# By default be strict with what we accept in the multipart/form-data
# request body. If the rule below proves to be too strict for your
# environment consider changing it to detection-only. You are encouraged
# _not_ to remove it altogether.
#
SecRule MULTIPART_STRICT_ERROR "!@eq 0" \
"id:'200003',phase:2,t:none,log,deny,status:400, \
msg:'Multipart request body failed strict validation: \
PE %{REQBODY_PROCESSOR_ERROR}, \
BQ %{MULTIPART_BOUNDARY_QUOTED}, \
BW %{MULTIPART_BOUNDARY_WHITESPACE}, \
DB %{MULTIPART_DATA_BEFORE}, \
DA %{MULTIPART_DATA_AFTER}, \
HF %{MULTIPART_HEADER_FOLDING}, \
LF %{MULTIPART_LF_LINE}, \
SM %{MULTIPART_MISSING_SEMICOLON}, \
IQ %{MULTIPART_INVALID_QUOTING}, \
IP %{MULTIPART_INVALID_PART}, \
IH %{MULTIPART_INVALID_HEADER_FOLDING}, \
FL %{MULTIPART_FILE_LIMIT_EXCEEDED}'"

# Did we see anything that might be a boundary?
#
SecRule MULTIPART_UNMATCHED_BOUNDARY "!@eq 0" \
"id:'200004',phase:2,t:none,log,deny,msg:'Multipart parser detected a possible unmatched boundary.'"

# PCRE Tuning
# We want to avoid a potential RegEx DoS condition
#
SecPcreMatchLimit 1000
SecPcreMatchLimitRecursion 1000

# Some internal errors will set flags in TX and we will need to look for these.
# All of these are prefixed with "MSC_".  The following flags currently exist:
#
# MSC_PCRE_LIMITS_EXCEEDED: PCRE match limits were exceeded.
#
SecRule TX:/^MSC_/ "!@streq 0" \
        "id:'200005',phase:2,t:none,deny,msg:'ModSecurity internal error flagged: %{MATCHED_VAR_NAME}'"


# -- Response body handling --------------------------------------------------

# Allow ModSecurity to access response bodies. 
# You should have this directive enabled in order to identify errors
# and data leakage issues.
# 
# Do keep in mind that enabling this directive does increases both
# memory consumption and response latency.
#
#SecResponseBodyAccess On
SecResponseBodyAccess Off

# Which response MIME types do you want to inspect? You should adjust the
# configuration below to catch documents but avoid static files
# (e.g., images and archives).
#
SecResponseBodyMimeType text/plain text/html text/xml

# Buffer response bodies of up to 512 KB in length.
SecResponseBodyLimit 524288

# What happens when we encounter a response body larger than the configured
# limit? By default, we process what we have and let the rest through.
# That's somewhat less secure, but does not break any legitimate pages.
#
SecResponseBodyLimitAction ProcessPartial


# -- Filesystem configuration ------------------------------------------------

# The location where ModSecurity stores temporary files (for example, when
# it needs to handle a file upload that is larger than the configured limit).
# 
# This default setting is chosen due to all systems have /tmp available however, 
# this is less than ideal. It is recommended that you specify a location that's private.
#
SecTmpDir /var/lib/modsecurity/tmp/

# The location where ModSecurity will keep its persistent data.  This default setting 
# is chosen due to all systems have /tmp available however, it
# too should be updated to a place that other users can't access.
#
SecDataDir /var/lib/modsecurity/tmp/


# -- File uploads handling configuration -------------------------------------

# The location where ModSecurity stores intercepted uploaded files. This
# location must be private to ModSecurity. You don't want other users on
# the server to access the files, do you?
#
SecUploadDir /var/lib/modsecurity/upload/

# By default, only keep the files that were determined to be unusual
# in some way (by an external inspection script). For this to work you
# will also need at least one file inspection rule.
#
SecUploadKeepFiles RelevantOnly

# Uploaded files are by default created with permissions that do not allow
# any other user to access them. You may need to relax that if you want to
# interface ModSecurity to an external program (e.g., an anti-virus).
#
SecUploadFileMode 0600


# -- Debug log configuration -------------------------------------------------

# The default debug log configuration is to duplicate the error, warning
# and notice messages from the error log.
#
SecDebugLog /var/log/modsecurity/debug.log
SecDebugLogLevel 3


# -- Audit log configuration -------------------------------------------------

# Log the transactions that are marked by a rule, as well as those that
# trigger a server error (determined by a 5xx or 4xx, excluding 404,  
# level response status codes).
#
SecAuditEngine RelevantOnly
SecAuditLogRelevantStatus "^(?:5|4(?!04))"

# Log everything we know about a transaction.
SecAuditLogParts ABIJDEFHZ

# Use a single file for logging. This is much easier to look at, but
# assumes that you will use the audit log only ocassionally.
#
SecAuditLogType Serial
SecAuditLog /var/log/modsecurity/audit.log

# Specify the path for concurrent audit logging.
#SecAuditLogStorageDir /opt/modsecurity/var/audit/


# -- Miscellaneous -----------------------------------------------------------

# Use the most commonly used application/x-www-form-urlencoded parameter
# separator. There's probably only one application somewhere that uses
# something else so don't expect to change this value.
#
SecArgumentSeparator &

# Settle on version 0 (zero) cookies, as that is what most applications
# use. Using an incorrect cookie version may open your installation to
# evasion attacks (against the rules that examine named cookies).
#
SecCookieFormat 0

# Specify your Unicode Code Point.
# This mapping is used by the t:urlDecodeUni transformation function
# to properly map encoded data to your language. Properly setting
# these directives helps to reduce false positives and negatives.
#
SecUnicodeMapFile /etc/nginx/conf.d/unicode.mapping 20127

# Improve the quality of ModSecurity by sharing information about your
# current ModSecurity version and dependencies versions.
# The following information will be shared: ModSecurity version,
# Web Server version, APR version, PCRE version, Lua version, Libxml2
# version, Anonymous unique id for host.
SecStatusEngine Off
#启用规则集
Include /etc/nginx/modsecurity-crs/modsecurity_crs_10_setup.conf
#白名单，不被过滤
Include /etc/nginx/modsecurity-crs/modsecurity_crs_11_whitelist.conf
#基础规则
#HTTP协议违规
Include /etc/nginx/modsecurity-crs/base_rules/modsecurity_crs_20_protocol_violations.conf
#HTTP协议异常
Include /etc/nginx/modsecurity-crs/base_rules/modsecurity_crs_21_protocol_anomalies.conf
#HTTP请求大小长度限制
Include /etc/nginx/modsecurity-crs/base_rules/modsecurity_crs_23_request_limits.conf
#HTTP协议策略(方法、版本、文件类型等）
Include /etc/nginx/modsecurity-crs/base_rules/modsecurity_crs_30_http_policy.conf
#恶意扫描器与爬虫
Include /etc/nginx/modsecurity-crs/base_rules/modsecurity_crs_35_bad_robots.conf
#常见的攻击例如命令执行，代码执行，注入，文件包含、敏感信息泄露、会话固定、HTTP响应拆分等相关规则
Include /etc/nginx/modsecurity-crs/base_rules/modsecurity_crs_40_generic_attacks.conf
#SQL注入
Include /etc/nginx/modsecurity-crs/base_rules/modsecurity_crs_41_sql_injection_attacks.conf
#XSS跨域攻击
Include /etc/nginx/modsecurity-crs/base_rules/modsecurity_crs_41_xss_attacks.conf
#目录遍历
Include /etc/nginx/modsecurity-crs/base_rules/modsecurity_crs_42_tight_security.conf
#webshell(木马)
#Include /etc/nginx/modsecurity-crs/base_rules/modsecurity_crs_45_trojans.conf
#常见异常
Include /etc/nginx/modsecurity-crs/base_rules/modsecurity_crs_47_common_exceptions.conf
#
#Include /etc/nginx/modsecurity-crs/base_rules/modsecurity_crs_48_local_exceptions.conf
#协同防御
Include /etc/nginx/modsecurity-crs/base_rules/modsecurity_crs_49_inbound_blocking.conf
#检测response_body中的错误信息，警告信息，列目录信息
#Include /etc/nginx/modsecurity-crs/base_rules/modsecurity_crs_50_outbound.conf
#协同防御相关规则
#Include /etc/nginx/modsecurity-crs/base_rules/modsecurity_crs_59_outbound_blocking.conf
#协同防御相关规则
Include /etc/nginx/modsecurity-crs/base_rules/modsecurity_crs_60_correlation.conf
#试验规则
#暴力破解
#Include /etc/nginx/modsecurity-crs/experimental_rules/modsecurity_crs_11_brute_force.conf
#DoS攻击
Include /etc/nginx/modsecurity-crs/experimental_rules/modsecurity_crs_11_dos_protection.conf
#检测X-Forwarded-For是否是恶意代理IP，IP黑名单
Include /etc/nginx/modsecurity-crs/experimental_rules/modsecurity_crs_11_proxy_abuse.conf
#Slow HTTP DoS攻击
Include /etc/nginx/modsecurity-crs/experimental_rules/modsecurity_crs_11_slow_dos_protection.conf
#
#Include /etc/nginx/modsecurity-crs/experimental_rules/modsecurity_crs_16_scanner_integration.conf
#检测响应体credit card信息
#Include /etc/nginx/modsecurity-crs/experimental_rules/modsecurity_crs_25_cc_track_pan.conf
#Include /etc/nginx/modsecurity-crs/experimental_rules/modsecurity_crs_40_appsensor_detection_point_2.0_setup.conf
#Include /etc/nginx/modsecurity-crs/experimental_rules/modsecurity_crs_40_appsensor_detection_point_2.1_request_exception.conf
#Include /etc/nginx/modsecurity-crs/experimental_rules/modsecurity_crs_40_appsensor_detection_point_2.9_honeytrap.conf
#Include /etc/nginx/modsecurity-crs/experimental_rules/modsecurity_crs_40_appsensor_detection_point_3.0_end.conf
#检测HTTP参数污染
Include /etc/nginx/modsecurity-crs/experimental_rules/modsecurity_crs_40_http_parameter_pollution.conf
#CSP安全策略设置
#Include /etc/nginx/modsecurity-crs/experimental_rules/modsecurity_crs_42_csp_enforcement.conf
#Include /etc/nginx/modsecurity-crs/experimental_rules/modsecurity_crs_46_scanner_integration.conf
#Include /etc/nginx/modsecurity-crs/experimental_rules/modsecurity_crs_48_bayes_analysis.conf
#使用外部脚本将响应体中的恶意内容替换为空
#Include /etc/nginx/modsecurity-crs/experimental_rules/modsecurity_crs_55_response_profiling.conf
#使用外部脚本检测REQUEST_FILENAME是否在osvdb漏洞库中
#Include /etc/nginx/modsecurity-crs/experimental_rules/modsecurity_crs_56_pvi_checks.conf
#收集记录违规IP的域名、GEO等信息
#Include /etc/nginx/modsecurity-crs/experimental_rules/modsecurity_crs_61_ip_forensics.conf
#可选规则
#静态文件忽略检测
Include /etc/nginx/modsecurity-crs/optional_rules/modsecurity_crs_10_ignore_static.conf
#AVS（授权的漏洞扫描器）的IP白名单规则
Include /etc/nginx/modsecurity-crs/optional_rules/modsecurity_crs_11_avs_traffic.conf
#请求体启用XML解析处理
#Include /etc/nginx/modsecurity-crs/optional_rules/modsecurity_crs_13_xml_enabler.conf
#记录登陆成功与失败的请求
#Include /etc/nginx/modsecurity-crs/optional_rules/modsecurity_crs_16_authentication_tracking.conf
#会话劫持检测
#Include /etc/nginx/modsecurity-crs/optional_rules/modsecurity_crs_16_session_hijacking.conf
#密码复杂度检测
#Include /etc/nginx/modsecurity-crs/optional_rules/modsecurity_crs_16_username_tracking.conf
#CreditCard验证
#Include /etc/nginx/modsecurity-crs/optional_rules/modsecurity_crs_25_cc_known.conf
#垃圾评论检测
Include /etc/nginx/modsecurity-crs/optional_rules/modsecurity_crs_42_comment_spam.conf
#与modsecurity_crs_16_session_hijacking.conf联合检测，使用内容注入动作append注入CSRF Token
#Include /etc/nginx/modsecurity-crs/optional_rules/modsecurity_crs_43_csrf_protection.conf
#使用外部脚本扫描病毒
#Include /etc/nginx/modsecurity-crs/optional_rules/modsecurity_crs_46_av_scanning.conf
#
#Include /etc/nginx/modsecurity-crs/optional_rules/modsecurity_crs_47_skip_outbound_checks.conf
#将WAF规则命中情况配合Apache RequestHeader指令注入到请求头中，以供后续应用进一步处理
#Include /etc/nginx/modsecurity-crs/optional_rules/modsecurity_crs_49_header_tagging.conf
#
#Include /etc/nginx/modsecurity-crs/optional_rules/modsecurity_crs_55_application_defects.conf
#记录MSN/Google/Yahoorobot情况
Include /etc/nginx/modsecurity-crs/optional_rules/modsecurity_crs_55_marketing.conf
#SLR规则
#JOOMLA应用的各种漏洞规则
#Include /etc/nginx/modsecurity-crs/slr_rules/modsecurity_crs_46_slr_et_joomla_attacks.conf
#各种APP的本地文件包含相关规则
#Include /etc/nginx/modsecurity-crs/slr_rules/modsecurity_crs_46_slr_et_lfi_attacks.conf
#PHPBB应用的各种漏洞规则
#Include /etc/nginx/modsecurity-crs/slr_rules/modsecurity_crs_46_slr_et_phpbb_attacks.conf
#各种APP的远程文件包含相关规则
#Include /etc/nginx/modsecurity-crs/slr_rules/modsecurity_crs_46_slr_et_rfi_attacks.conf
#各种APP的SQL注入相关规则
#Include /etc/nginx/modsecurity-crs/slr_rules/modsecurity_crs_46_slr_et_sqli_attacks.conf
#WORDPRESS应用的各种漏洞规则
#Include /etc/nginx/modsecurity-crs/slr_rules/modsecurity_crs_46_slr_et_wordpress_attacks.conf
#各种APP的XSS相关规则
#Include /etc/nginx/modsecurity-crs/slr_rules/modsecurity_crs_46_slr_et_xss_attacks.conf
#被屏蔽的规则
Include /etc/nginx/modsecurity-crs/modsecurity_crs_99_banned_rules.conf
